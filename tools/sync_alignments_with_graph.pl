#!/usr/bin/env perl
# Reads UMR file generated by Federica's converter from UD. Makes sure that
# alignments contain all variables from sentence graph and nothing more.
# Copyright © 2025 Dan Zeman <zeman@ufal.mff.cuni.cz>
# License: GNU GPL

use utf8;
use open ':utf8';
binmode(STDIN, ':utf8');
binmode(STDOUT, ':utf8');
binmode(STDERR, ':utf8');

my %variables;
my @alines;
while(<>)
{
    # On the start of a new sentence, reset the database of variables.
    if(m/\# :: snt ([0-9]+)/)
    {
        %variables = ();
        @alines = ();
    }
    # Look for variables in the sentence graph. Assume there is at most one per line.
    # Note that sometimes they contain non-English letters although it is unclear whether UMR allows it.
    if(m:\((s[0-9]+[a-záčďéíňóřšťúýž][0-9]*) / :)
    {
        $variables{$1}++;
    }
    # Is this an alignment line?
    if(m/^(s[0-9]+[a-záčďéíňóřšťúýž][0-9]*): ([0-9]+)-.+$/)
    {
        my %aline =
        (
            'line' => $_,
            'variable' => $1,
            'tokindex' => $2
        );
        # Remember the line only if it is a known variable.
        if(exists($variables{$aline{variable}}))
        {
            $variables{$aline{variable}} = \%aline;
            push(@alines, \%aline);
        }
        else
        {
            #print STDERR ("Throwing away alignment of unused variable: $_");
        }
    }
    # Is this the first line after alignments?
    elsif(scalar(@alines) > 0)
    {
        # If there are missing alignments for a variable, that variable's
        # value in the hash is a number rather than a record.
        foreach my $variable (keys(%variables))
        {
            if(ref($variables{$variable}) ne 'HASH')
            {
                $variables{$variable} =
                {
                    'line' => "$variable: 0-0\n",
                    'variable' => $variable,
                    'tokindex' => 0
                };
            }
        }
        # Sort and print the alignments.
        my @variables = sort
        {
            my $r = $variables{$a}{tokindex} <=> $variables{$b}{tokindex};
            unless($r)
            {
                $r = $variables{$a}{variable} cmp $variables{$b}{variable};
            }
            $r
        }
        (keys(%variables));
        foreach my $variable (@variables)
        {
            print($variables{$variable}{line});
        }
        @alines = ();
        print;
    }
    # Other lines can be directly passed through.
    else
    {
        print;
    }
}
